//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SvnBridge.CodePlexWebServices
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

    // 
    // This source code was auto-generated by wsdl, Version=2.0.50727.3038.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "WorkItemServiceSoap", Namespace = "http://schema.codeplex.com/ProjectService")]
    public partial class WorkItemService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback MarkWorkItemAsFixedOperationCompleted;

        /// <remarks/>
        public event MarkWorkItemAsFixedCompletedEventHandler MarkWorkItemAsFixedCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schema.codeplex.com/ProjectService/MarkWorkItemAsFixed", RequestNamespace = "http://schema.codeplex.com/ProjectService", ResponseNamespace = "http://schema.codeplex.com/ProjectService", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkWorkItemAsFixed(string projectName, string userName, int workItemId, int changeSetId)
        {
            this.Invoke("MarkWorkItemAsFixed", new object[] {
                    projectName,
                    userName,
                    workItemId,
                    changeSetId});
        }

        /// <remarks/>
        public System.IAsyncResult BeginMarkWorkItemAsFixed(string projectName, string userName, int workItemId, int changeSetId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("MarkWorkItemAsFixed", new object[] {
                    projectName,
                    userName,
                    workItemId,
                    changeSetId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndMarkWorkItemAsFixed(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void MarkWorkItemAsFixedAsync(string projectName, string userName, int workItemId, int changeSetId)
        {
            this.MarkWorkItemAsFixedAsync(projectName, userName, workItemId, changeSetId, null);
        }

        /// <remarks/>
        public void MarkWorkItemAsFixedAsync(string projectName, string userName, int workItemId, int changeSetId, object userState)
        {
            if ((this.MarkWorkItemAsFixedOperationCompleted == null))
            {
                this.MarkWorkItemAsFixedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkWorkItemAsFixedOperationCompleted);
            }
            this.InvokeAsync("MarkWorkItemAsFixed", new object[] {
                    projectName,
                    userName,
                    workItemId,
                    changeSetId}, this.MarkWorkItemAsFixedOperationCompleted, userState);
        }

        private void OnMarkWorkItemAsFixedOperationCompleted(object arg)
        {
            if ((this.MarkWorkItemAsFixedCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkWorkItemAsFixedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void MarkWorkItemAsFixedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}